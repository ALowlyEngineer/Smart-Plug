import sys,os
import time
from scipy.interpolate import interp1d  
import numpy as np
import matplotlib.pyplot as plt
from scipy import integrate

from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure

import random
import serial

start= time.time()
conn = sqlite3.connect(':memory:')
c = conn.cursor()
c.execute("""CREATE TABLE plugData(voltage real, current real, time real)""")
c.execute("SELECT * FROM pedaling WHERE time != 0") #for degugging prints all from database
#print(c.fetchall())
conn.commit()

ser = serial.Serial('/dev/ttyS0')  # open serial port
ser.baudrate = 9600
#print(ser.name)         # check which port was really used

def update_data(self): 

        #ser.write("rose") for testing
        ser.flush()
        self.input = ser.read(9)
        self.volt_value= self.input #change this to match the byte design you made
        self.curr_value= self.input.split[1]
        self.curr_float = float(self.curr_value)
        self.volt_float = float(self.volt_value)
        
        #self.power_float = self.volt_float * self.curr_float
        #self.power_float = round(self.power_float,3)
        
        #self.volt_read.setText(self.volt_value + " V")  for formating the variable later on
        #self.curr_read.setText(self.curr_value + " A")        
        #self.power_read.setText(str(self.power_float)+ " W")
        
        #Writing to the Database example
    
        point= time.time() - start
        c.execute("""INSERT INTO pedaling (power, time)  VALUES(?,?)""", (self.power_float, point))
        conn.commit()
        
        c.execute("SELECT * FROM pedaling")
        records =c.fetchall()
        self.pwr = []
        for column in records:
            self.pwr.append(column[0])
       

        self.tme = []
        for column in records:
            self.tme.append(column[1])
      

        self.energy = np.trapz( self.pwr, x= self.tme)
        self.energy = self.energy /(60 * 60) #to convert to hours
       
        self.cost_value = self.energy * .0873
        self.cost_value = round(self.cost_value, 4)
        self.cost_read.setText("$" + str( self.cost_value))
       

        ## Calorie calculations (860.421 kcal/ kWh)
        self.cal_value = (self.energy) * 860.421
        self.cal_value = round(self.cal_value, 3)
        self.cal_read.setText( str(self.cal_value) + " kcal")
